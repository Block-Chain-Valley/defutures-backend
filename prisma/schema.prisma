// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Chain {
  id             String   @id @default(cuid()) @map("_id") @db.ObjectId
  chainId        Int
  name           String
  symbol         String
  rpcUrl         String
  tokens         Token[]
  blockTime      Int
  factoryAddress String
  routerAddress  String
  WETHAddress    String
  pairId         String[] @db.ObjectId
  pairs          Pair[]

  @@unique([chainId])
}

model Swap {
  id          String   @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt   DateTime
  account     String
  logIndex    Int
  txHash      String
  blockNumber Int
  verified    Boolean  @default(true)
  fromTokenId String   @db.ObjectId
  toTokenId   String   @db.ObjectId
  fromToken   Token    @relation("swap_from", fields: [fromTokenId], references: [id])
  toToken     Token    @relation("swap_to", fields: [toTokenId], references: [id])
  fromAmount  String
  toAmount    String
  pairId      String   @db.ObjectId
  pair        Pair     @relation(fields: [pairId], references: [id])

  @@unique([txHash, logIndex])
  @@index([account])
}

model Token {
  id       String @id @default(cuid()) @map("_id") @db.ObjectId
  chainId  Int
  address  String
  name     String
  symbol   String
  decimals Int    @default(18)
  pair0    Pair[] @relation("pair_token_0")
  pair1    Pair[] @relation("pair_token_1")
  swapFrom Swap[] @relation("swap_from")
  swapTo   Swap[] @relation("swap_to")
  chain    Chain  @relation(fields: [chainId], references: [chainId])

  @@unique([address])
}

// model Transfer {
//   id          String   @id @default(cuid()) @map("_id") @db.ObjectId
//   createdAt   DateTime
//   logIndex    Int
//   txHash      String
//   blockNumber Int
//   verified    Boolean  @default(true)
//   from        String
//   to          String
//   amount      String
//   tokenId     String   @db.ObjectId
//   token       Token    @relation(fields: [tokenId], references: [id])
//   // exchange    Exchange? @relation(fields [exchangeId], references: [id])

//   @@unique([txHash, logIndex])
// }

model Pair {
  id      String @id @default(cuid()) @map("_id") @db.ObjectId
  address String

  token0Id String @db.ObjectId
  token1Id String @db.ObjectId

  token0 Token @relation("pair_token_0", fields: [token0Id], references: [id])
  token1 Token @relation("pair_token_1", fields: [token1Id], references: [id])

  events  Swap[]
  chainId String @db.ObjectId
  chain   Chain  @relation(fields: [chainId], references: [id])

  @@unique([address])
}
